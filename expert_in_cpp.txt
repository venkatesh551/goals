

Read book and solve questions from 
The C Programming Language
Book by Brian Kernighan and Dennis Ritchie.
After that write code on any online coding contest website.


For C++ :

https://isocpp.org/blog/2014/09/templates-series

https://isocpp.org/wiki/faq/templates#overview-templates

First read book  Programming: Principles and Practice Using C++  Book by Bjarne Stroustrup then

C++ Primer Book by  Josée Lajoie and Stanley B. Lippman

---

https://isocpp.org/blog/2012/11/universal-references-in-c11-scott-meyers
http://thbecker.net/articles/rvalue_references/section_08.html#footnote_1



skill acquisition :
-------------------

The original model proposes that a student passes through five distinct stages: novice, competence, proficiency, expertise, and mastery.


In the novice stage, a person follows rules as given, without context, with no sense of responsibility beyond following the rules exactly. 

Competence develops when the individual develops organizing principles to quickly access the particular rules that are relevant to the specific task at hand; hence, competence is characterized by active decision making in choosing a course of action. 

Proficiency is shown by individuals who develop intuition to guide their decisions and devise their own rules to formulate plans. 

The progression is thus from rigid adherence to rules to an intuitive mode of reasoning based on tacit knowledge.

Michael Eraut summarized the five stages of increasing skill as follows:[2]

1. Novice
"rigid adherence to taught rules or plans"
no exercise of "discretionary judgment"

2. Advanced beginner
limited "situational perception"
all aspects of work treated separately with equal importance

3. Competent
"coping with crowdedness" (multiple activities, accumulation of information)
some perception of actions in relation to goals
deliberate planning
formulates routines

4. Proficient
holistic view of situation
prioritizes importance of aspects
"perceives deviations from the normal pattern"
employs maxims for guidance, with meanings that adapt to the situation at hand

5. Expert
transcends reliance on rules, guidelines, and maxims
"intuitive grasp of situations based on deep, tacit understanding"
has "vision of what is possible"
uses "analytical approaches" in new situations or in case of problems























    




The composition offered by templates is type-safe.
    
max example








Template specialization:
---------------------------    
When a function or class is instantiated from a template, 
a specialization of that template is created by the compiler 
for the set of arguments used,










Defining a Template
--------------------

A template is a specification of how to generate something
given suitable template arguments;

don’t care much whether a class or a function is generated.

the rules for templates apply equally to class templates and function
templates.

when trying to understand a template,
it is often useful to imagine its behavior for a particular type argument
before trying to comprehend the template in its full generality




example:
    
It is not possible to overload a class template name, so if a class template is declared in a scope, no other entity can be declared there with the same name.


A type used as a template argument must provide the interface expected by the template.








Type Equivalence
-----------------





Class Template Members
------------------------

* Data Members

A non- static data member can be initialized in its definition or in a constructor

* Member Functions

a non- static member function of a class template can be defined in-class
or outside the class

a member function of a template can be virtual or not. However, a virtual member func-
tion cannot also be a member function template


* Templates and virtual
------------------------
A member template cannot be virtual .

class Shape {
    // ...
    template<typename T>
    virtual bool intersect(const T&) const =0;
};



"Avoid nested types in templates unless they genuinely rely 
on every template parameter."














    






















In the standard library, string is a synonym for basic_string<char>

using string = std::basic_string<char>;











ETRADE 22120344984096

hdfc 50100089428252
